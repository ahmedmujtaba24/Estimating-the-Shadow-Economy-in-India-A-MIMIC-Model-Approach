#the first block acts as the base, rest of the codes were written at differnet tomes at differnt enviroment
___________________________________________________________________________________________________________
#Multicollinearity diagnostics

import pandas as pd
import numpy as np
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.stats.diagnostic import het_breuschpagan, acorr_ljungbox

data = pd.DataFrame({
    'Year': range(2011, 2023),
    'Unemployment': [0.0762, 0.0767, 0.0771, 0.0767, 0.0763, 0.076, 0.0762, 0.0765, 0.0651, 0.0786, 0.0638, 0.0482],
    'GDP_per_capita': [1445.46, 1429.32, 1432.84, 1553.88, 1584.0, 1707.51, 1950.10, 1966.25, 2041.43, 1907.04, 2239.61, 2352.61],
    'EoDB_Score': [48.5, 49.83, 51.17, 52.5, 54.25, 56, 60.5, 65, 68, 71, 73.71, 76.13],
    'Tax_to_GDP': [np.nan, 10.1, 10.0, 10.2, 10.8, 10.4, 10.9, 11.2, 11.0, 9.8, 10.2, 11.1],
    'Inflation': [8.91, 9.48, 10.02, 6.67, 4.91, 4.95, 3.33, 3.94, 3.73, 6.62, 5.13, 6.7],
    'M2_Supply': [14914, 17357, 19800, 22243, 23000, 25500, 27800, 30500, 34000, 39000, 44000, 49500],
    'Tax_Revenue': [961313, 1115888, 1242463, 1437061, 1713262, 1976609, 2153809, 2030699, 2016251, 2713422, 2965673, 3442000]
}).dropna()

# Center variables
data['GDP_centered'] = data['GDP_per_capita'] - data['GDP_per_capita'].mean()
data['EoDB_centered'] = data['EoDB_Score'] - data['EoDB_Score'].mean()

reduced_model_vif = variance_inflation_factor(
    X.drop(columns=['GDP_centered']).values, 
    X.columns.get_loc('EoDB_centered')
)
print(f"EoDB VIF after GDP removal: {reduced_model_vif:.2f}")

import seaborn as sns
corr_matrix = X.corr().round(2)
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title("Correlation Matrix of Predictors")
___________________________________________________________________________________________________________
#Heteroskedasticity diagnostic

def test_heteroskedasticity(y, X):
    model = sm.OLS(y, sm.add_constant(X))
    results = model.fit()
    _, pval, _, _ = het_breuschpagan(results.resid, results.model.exog)
    return pval

print("\nHeteroskedasticity p-values:")
print(f"M2 Supply: {test_heteroskedasticity(data['M2_Supply'], X):.4f}")
print(f"Tax Revenue: {test_heteroskedasticity(data['Tax_Revenue'], X):.4f}")

___________________________________________________________________________________________________________
#Auto-Correlation 

residuals = m2_results.resid
lb_test = acorr_ljungbox(residuals, lags=[1,2,3], return_df=True)
print("\nLjung-Box Autocorrelation Test:")
print(lb_test.to_markdown())
